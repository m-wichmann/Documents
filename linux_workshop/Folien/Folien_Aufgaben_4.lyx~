#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% oder ...

\setbeamercovered{transparent}
% oder auch nicht
\end_preamble
\use_default_options false
\language ngerman
\inputencoding auto
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language danish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Unix Workshop - Aufgaben 4
\end_layout

\begin_layout Author
Martin Wichmann
\end_layout

\begin_layout Section
Überblick
\end_layout

\begin_layout BeginFrame
Überblick
\end_layout

\begin_layout Itemize
Komplexe Aufgabe mit verschiedenen Komponenten
\end_layout

\begin_layout Itemize
Prozesse
\end_layout

\begin_layout Itemize
Eingabe- und Ausgabeströme
\end_layout

\begin_layout Itemize
Skripte
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Erläuterung
\end_layout

\begin_layout BeginFrame
Prozesse
\end_layout

\begin_layout Itemize
Linux verwendet viele Prozesse
\end_layout

\begin_layout Itemize
Erster Prozess: init
\end_layout

\begin_layout Itemize
PID -> Process ID
\end_layout

\begin_layout Itemize
Befehle
\end_layout

\begin_deeper
\begin_layout Itemize
ps -> Prozesse anzeigen
\end_layout

\begin_layout Itemize
kill -> Prozess beenden
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Streams
\end_layout

\begin_layout Itemize
Bash unterstützt verschiedene Streams (Datenströme)
\end_layout

\begin_layout Itemize
‵‵, <, <<, >, >>, |
\end_layout

\begin_layout Itemize
Spitze Klamern -> Leitet Ein- und Ausgabe in Datei um
\end_layout

\begin_deeper
\begin_layout Itemize
Einfache Klammern -> Erstellt immer neue Datei
\end_layout

\begin_layout Itemize
Doppelte Klammern -> Hängt an bestehende Datei an, sonst erstellt Datei
\end_layout

\end_deeper
\begin_layout Itemize
| -> Verwendet Ausgabe als Eingabe des nächsten Befehls
\end_layout

\begin_layout Itemize
‵Befehl‵ -> Führt zuerst Befehl aus und verwendet Ergebnis als weitere Eingabe
\end_layout

\begin_layout Itemize
Beispiele:
\end_layout

\begin_deeper
\begin_layout Itemize
cat logfile.log | grep "eth0" > filteredfile.log
\end_layout

\begin_layout Itemize
echo ‵uname -a‵
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Bash Skripte
\end_layout

\begin_layout Itemize
Turing-Vollständig
\end_layout

\begin_layout Itemize
Aufbau
\end_layout

\begin_deeper
\begin_layout Itemize
Textdatei mit Endung .sh
\end_layout

\begin_layout Itemize
Erste Zeile: #!/bin/bash
\end_layout

\begin_layout Itemize
Ähnelt anderen Skriptsprachen
\end_layout

\begin_layout Itemize
Etwas gewöhnungsbedürftige Syntax
\end_layout

\end_deeper
\begin_layout Itemize
Alles was mittels Shell ausgeführt werden kann, kann auch mittels Skript
 erledigt werden und umgekehrt
\end_layout

\begin_layout Itemize
Aufruf mit 
\begin_inset Quotes ald
\end_inset

sh script_file.sh
\begin_inset Quotes ard
\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Cron
\end_layout

\begin_layout Itemize
Wird verwendet um Regelmäßig Aktionen auszuführen
\end_layout

\begin_layout Itemize
Konfiguration wird mittels Config-Datei erstellt
\end_layout

\begin_layout Itemize
Tool crontab legt diese an
\end_layout

\begin_layout Itemize
Format der Tabelle:
\end_layout

\begin_deeper
\begin_layout Itemize
Minuten Stunden Tage Monate Wochentage Befehl
\end_layout

\begin_layout Itemize
*/5 * * * * /usr/bin/message.sh
\end_layout

\begin_layout Itemize
Beispiel führt alle 5 Minuten das Skript message.sh aus
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
awk
\end_layout

\begin_layout Itemize
Skriptsprache zur Bearbeitung von Textdateien
\end_layout

\begin_layout Itemize
Turing-Vollständig
\end_layout

\begin_layout Itemize
Oft über Kommandozeile ausgeführt:
\end_layout

\begin_deeper
\begin_layout Itemize
echo Hallo Welt | awk '{printf "%s %s!
\backslash
n",$1,$2}'
\end_layout

\begin_layout Itemize
Ausgabe: 
\begin_inset Quotes ald
\end_inset

Hallo Welt!
\begin_inset Quotes ard
\end_inset

 und Zeilenumbruch
\end_layout

\end_deeper
\begin_layout Itemize
In diesen Aufgaben wird lediglich eine Spalte gefiltert
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Umgebungsvariablen
\end_layout

\begin_layout Itemize
Enthalten spezielle, wichtige Informationen für das System
\end_layout

\begin_layout Itemize
Werden durch Shell verwaltet und gesetzt
\end_layout

\begin_layout Itemize
Werden durch $ als Systemvariable gekennzeichnet
\end_layout

\begin_layout Itemize
Beispiel
\end_layout

\begin_deeper
\begin_layout Itemize
echo $PATH
\end_layout

\begin_layout Itemize
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
\end_layout

\begin_layout Itemize
export PATH=$PATH:/test/bin
\end_layout

\end_deeper
\begin_layout Itemize
Für Aufgaben relevant:
\end_layout

\begin_deeper
\begin_layout Itemize
$DISPLAY -> Gibt zu verwendenden Bildschirm an
\end_layout

\begin_layout Itemize
Muss in Skript Aufruf durch cron von Hand auf :0.0 gesetzt werden, um Program
 anzeigen zu können
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Section
Aufgaben
\end_layout

\begin_layout BeginFrame
Lernsituation
\end_layout

\begin_layout Standard
Ihre Firma verwendet den VLC-Player, um Firmen-intern Musik zu streamen.
 Nach einem Update des Servers, scheint der Streaming-Server nach etwa einer
 Stunde den Geist aufzugeben.
 Da Sie bisher den Fehler noch nicht finden konnten, sollen Sie nun einen
 Quickfix einrichten, sodass der Stream regelmäßig neu startet.
 Ihr Kollege arbeitet indes an einer eleganteren Lösung für diese Problem.
 
\end_layout

\begin_layout Standard
Testen Sie ihre Lösung lokal, sodass Sie zeigen können das es funktioniert.
 Verändern Sie hierzu die entsprechenden Eigenschaften.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Aufgaben I
\end_layout

\begin_layout Itemize
Vorbereitung für die Aufgabe
\end_layout

\begin_deeper
\begin_layout Itemize
Lassen Sie sich alle Prozesse eines bestimmten Benutzers anzeigen (ps)
\end_layout

\begin_layout Itemize
Filtern Sie diese Ausgabe nach dem Begriff "vlc" (grep)
\end_layout

\begin_layout Itemize
Starten Sie ein beliebiges Programm und beenden Sie es von der Konsole aus
 (kill)
\end_layout

\begin_layout Itemize
Schreiben Sie ein kleines Skript und lassen Sie es regelmäßig ausführen
\end_layout

\begin_deeper
\begin_layout Itemize
Erstellen Sie ein Skript, dass auf der Konsole "Hello World!" ausgibt (sh)
\end_layout

\begin_layout Itemize
Leiten Sie die Ausgabe in eine Datei um (>>)
\end_layout

\begin_layout Itemize
Lassen Sie das Skript regelmäßig ausführen (cron, crontab)
\end_layout

\end_deeper
\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Aufgaben II
\end_layout

\begin_layout Itemize
Richten Sie den Quickfix für den Streaming-Server ein
\end_layout

\begin_deeper
\begin_layout Itemize
Schreiben Sie ein Skript, dass...
\end_layout

\begin_deeper
\begin_layout Itemize
...die Prozesse des Benutzers "streaming" ausgibt und nach dem Begriff "vlc"
 filtert (ps, grep)
\end_layout

\begin_layout Itemize
...die Spalte PID (1.
 Spalte) der vorherigen Ausgabe filtert (awk)
\end_layout

\begin_layout Itemize
...die gefilterten Prozesse beendet (kill) und wieder einen neuen VLC-Player
 startet
\end_layout

\end_deeper
\begin_layout Itemize
Lassen Sie das Skript alle 45 Minuten automatisch ausführen (cron, crontab)
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\end_body
\end_document
